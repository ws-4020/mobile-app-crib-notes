/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from 'react-query';
import type {TermsOfService} from '.././model';
import {useBackendCustomInstance, ErrorType} from '../../../framework/backend/useCustomInstance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅÆÂëº„Å≥Âá∫„Åó„Å´„ÅØË™çË®ºÊÉÖÂ†±„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

 * @summary ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÅÆÂèñÂæó
 */
export const useGetTermsHook = () => {
  const getTerms = useBackendCustomInstance<TermsOfService>();

  return () => {
    return getTerms({url: `/terms`, method: 'get'});
  };
};

export const getGetTermsQueryKey = () => [`/terms`];

export const useGetTerms = <
  TData = AsyncReturnType<ReturnType<typeof useGetTermsHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTermsHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTermsQueryKey();

  const getTerms = useGetTermsHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTermsHook>>> = () => getTerms();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTermsHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};
