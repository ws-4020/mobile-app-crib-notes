/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  CsrfTokenResponse,
  Account,
  BadRequestResponse,
  AccountRegistration,
  AccountLoginResponse,
  UnauthorizedResponse,
  AccountLogin,
  ForbiddenResponse,
  AvatarImage,
  UpdateDeviceToken,
  TermsOfServiceAgreementStatus,
  AccountDeletion,
  TermsOfService,
  Team,
  TeamInvitation,
  TimetableTemplate,
  GetTeamsTeamIdTimetableTemplatesParams,
  TimetableOfDay,
  GetTeamsTeamIdTimetablesParams,
  TimetableOfDayInput,
} from './model';
import {useBackendCustomInstance, ErrorType} from '../../framework/backend/useCustomInstance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * CSRF„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary CSRF„Éà„Éº„ÇØ„É≥„ÅÆÂèñÂæó
 */
export const useGetCsrfTokenHook = () => {
  const getCsrfToken = useBackendCustomInstance<CsrfTokenResponse>();

  return () => {
    return getCsrfToken({url: `/csrf_token`, method: 'get'});
  };
};

export const getGetCsrfTokenQueryKey = () => [`/csrf_token`];

export const useGetCsrfToken = <
  TData = AsyncReturnType<ReturnType<typeof useGetCsrfTokenHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetCsrfTokenHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetCsrfTokenQueryKey();

  const getCsrfToken = useGetCsrfTokenHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetCsrfTokenHook>>> = () => getCsrfToken();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetCsrfTokenHook>>, TError, TData>(queryKey, queryFn, {
    cacheTime: 1000,
    staleTime: 1000,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤„Å´„ÅØ„ÄÅ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤
 */
export const usePostSignupHook = () => {
  const postSignup = useBackendCustomInstance<Account>();

  return (accountRegistration: AccountRegistration) => {
    return postSignup({url: `/signup`, method: 'post', data: accountRegistration});
  };
};

export const usePostSignup = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostSignupHook>>,
    TError,
    {data: AccountRegistration},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postSignup = usePostSignupHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostSignupHook>>,
    {data: AccountRegistration}
  > = props => {
    const {data} = props || {};

    return postSignup(data);
  };

  return useMutation<AsyncReturnType<typeof postSignup>, TError, {data: AccountRegistration}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÊåáÂÆö„Åó„Å¶„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const usePostLoginHook = () => {
  const postLogin = useBackendCustomInstance<AccountLoginResponse>();

  return (accountLogin: AccountLogin) => {
    return postLogin({url: `/login`, method: 'post', data: accountLogin});
  };
};

export const usePostLogin = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostLoginHook>>,
    TError,
    {data: AccountLogin},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postLogin = usePostLoginHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostLoginHook>>,
    {data: AccountLogin}
  > = props => {
    const {data} = props || {};

    return postLogin(data);
  };

  return useMutation<AsyncReturnType<typeof postLogin>, TError, {data: AccountLogin}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà„Åô„Çã
 */
export const usePostLogoutHook = () => {
  const postLogout = useBackendCustomInstance<void>();

  return () => {
    return postLogout({url: `/logout`, method: 'post'});
  };
};

export const usePostLogout = <
  TError = ErrorType<BadRequestResponse | ForbiddenResponse>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<ReturnType<typeof usePostLogoutHook>>, TError, TVariables, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postLogout = usePostLogoutHook();

  const mutationFn: MutationFunction<AsyncReturnType<ReturnType<typeof usePostLogoutHook>>, TVariables> = () => {
    return postLogout();
  };

  return useMutation<AsyncReturnType<typeof postLogout>, TError, TVariables, TContext>(mutationFn, mutationOptions);
};

/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Çí„Ç≠„Éº„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsAccountIdHook = () => {
  const getAccountsAccountId = useBackendCustomInstance<Account>();

  return (accountId: string) => {
    return getAccountsAccountId({url: `/accounts/${accountId}`, method: 'get'});
  };
};

export const getGetAccountsAccountIdQueryKey = (accountId: string) => [`/accounts/${accountId}`];

export const useGetAccountsAccountId = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdQueryKey(accountId);

  const getAccountsAccountId = useGetAccountsAccountIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>> = () =>
    getAccountsAccountId(accountId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!accountId, cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsAccountIdAvatarHook = () => {
  const getAccountsAccountIdAvatar = useBackendCustomInstance<AvatarImage>();

  return (accountId: string) => {
    return getAccountsAccountIdAvatar({url: `/accounts/${accountId}/avatar`, method: 'get'});
  };
};

export const getGetAccountsAccountIdAvatarQueryKey = (accountId: string) => [`/accounts/${accountId}/avatar`];

export const useGetAccountsAccountIdAvatar = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdAvatarQueryKey(accountId);

  const getAccountsAccountIdAvatar = useGetAccountsAccountIdAvatarHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>> = () =>
    getAccountsAccountIdAvatar(accountId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!accountId, cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsMeHook = () => {
  const getAccountsMe = useBackendCustomInstance<Account>();

  return () => {
    return getAccountsMe({url: `/accounts/me`, method: 'get'});
  };
};

export const getGetAccountsMeQueryKey = () => [`/accounts/me`];

export const useGetAccountsMe = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>,
  TError = ErrorType<ForbiddenResponse>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeQueryKey();

  const getAccountsMe = useGetAccountsMeHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>> = () => getAccountsMe();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>, TError, TData>(queryKey, queryFn, {
    cacheTime: 1000,
    staleTime: 1000,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsMeAvatarHook = () => {
  const getAccountsMeAvatar = useBackendCustomInstance<AvatarImage>();

  return () => {
    return getAccountsMeAvatar({url: `/accounts/me/avatar`, method: 'get'});
  };
};

export const getGetAccountsMeAvatarQueryKey = () => [`/accounts/me/avatar`];

export const useGetAccountsMeAvatar = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeAvatarQueryKey();

  const getAccountsMeAvatar = useGetAccountsMeAvatarHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>> = () =>
    getAccountsMeAvatar();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>, TError, TData>(
    queryKey,
    queryFn,
    {cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã
 */
export const usePutAccountsMeAvatarHook = () => {
  const putAccountsMeAvatar = useBackendCustomInstance<void>();

  return (avatarImage: AvatarImage) => {
    const formData = new FormData();
    if (avatarImage.avatarImage !== undefined) {
      formData.append('avatarImage', avatarImage.avatarImage);
    }

    return putAccountsMeAvatar({url: `/accounts/me/avatar`, method: 'put', data: formData});
  };
};

export const usePutAccountsMeAvatar = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutAccountsMeAvatarHook>>,
    TError,
    {data: AvatarImage},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putAccountsMeAvatar = usePutAccountsMeAvatarHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutAccountsMeAvatarHook>>,
    {data: AvatarImage}
  > = props => {
    const {data} = props || {};

    return putAccountsMeAvatar(data);
  };

  return useMutation<AsyncReturnType<typeof putAccountsMeAvatar>, TError, {data: AvatarImage}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÇíÊõ¥Êñ∞„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÅÆÊõ¥Êñ∞
 */
export const usePostAccountsMeDeviceTokenHook = () => {
  const postAccountsMeDeviceToken = useBackendCustomInstance<void>();

  return (updateDeviceToken: UpdateDeviceToken) => {
    return postAccountsMeDeviceToken({url: `/accounts/me/device-token`, method: 'post', data: updateDeviceToken});
  };
};

export const usePostAccountsMeDeviceToken = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeDeviceTokenHook>>,
    TError,
    {data: UpdateDeviceToken},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postAccountsMeDeviceToken = usePostAccountsMeDeviceTokenHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeDeviceTokenHook>>,
    {data: UpdateDeviceToken}
  > = props => {
    const {data} = props || {};

    return postAccountsMeDeviceToken(data);
  };

  return useMutation<AsyncReturnType<typeof postAccountsMeDeviceToken>, TError, {data: UpdateDeviceToken}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å¶„ÅÑ„Çã„Åã„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑèÁä∂ÊÖãÁ¢∫Ë™ç
 */
export const useGetAccountsMeTermsHook = () => {
  const getAccountsMeTerms = useBackendCustomInstance<TermsOfServiceAgreementStatus>();

  return () => {
    return getAccountsMeTerms({url: `/accounts/me/terms`, method: 'get'});
  };
};

export const getGetAccountsMeTermsQueryKey = () => [`/accounts/me/terms`];

export const useGetAccountsMeTerms = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeTermsQueryKey();

  const getAccountsMeTerms = useGetAccountsMeTermsHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>> = () =>
    getAccountsMeTerms();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>, TError, TData>(
    queryKey,
    queryFn,
    {cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„Åä„ÅÑ„Å¶„ÄÅÊåáÂÆö„Åï„Çå„ÅüÂà©Áî®Ë¶èÁ¥Ñ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑè
 */
export const usePostAccountsMeTermsHook = () => {
  const postAccountsMeTerms = useBackendCustomInstance<TermsOfServiceAgreementStatus>();

  return (termsOfServiceAgreementStatus: TermsOfServiceAgreementStatus) => {
    return postAccountsMeTerms({url: `/accounts/me/terms`, method: 'post', data: termsOfServiceAgreementStatus});
  };
};

export const usePostAccountsMeTerms = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeTermsHook>>,
    TError,
    {data: TermsOfServiceAgreementStatus},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postAccountsMeTerms = usePostAccountsMeTermsHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeTermsHook>>,
    {data: TermsOfServiceAgreementStatus}
  > = props => {
    const {data} = props || {};

    return postAccountsMeTerms(data);
  };

  return useMutation<
    AsyncReturnType<typeof postAccountsMeTerms>,
    TError,
    {data: TermsOfServiceAgreementStatus},
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇ

„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂâäÈô§„Å´„Éë„Çπ„ÉØ„Éº„Éâ„ÇíË¶ÅÊ±Ç„Åô„Çã„ÅÆ„Åß„ÄÅDELETE„É°„ÇΩ„ÉÉ„Éâ„Åß„ÅØ„Å™„ÅèPOST„É°„ÇΩ„ÉÉ„Éâ„ÇíÂà©Áî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ

ÂèÇËÄÉ: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)

> A payload within a DELETE request message has no defined semantics;
> sending a payload body on a DELETE request might cause some existing
> implementations to reject the request.

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const useDeleteAccountsMeDeleteHook = () => {
  const deleteAccountsMeDelete = useBackendCustomInstance<void>();

  return (accountDeletion: AccountDeletion) => {
    return deleteAccountsMeDelete({url: `/accounts/me/delete`, method: 'post', data: accountDeletion});
  };
};

export const useDeleteAccountsMeDelete = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useDeleteAccountsMeDeleteHook>>,
    TError,
    {data: AccountDeletion},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const deleteAccountsMeDelete = useDeleteAccountsMeDeleteHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useDeleteAccountsMeDeleteHook>>,
    {data: AccountDeletion}
  > = props => {
    const {data} = props || {};

    return deleteAccountsMeDelete(data);
  };

  return useMutation<AsyncReturnType<typeof deleteAccountsMeDelete>, TError, {data: AccountDeletion}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅÆÂëº„Å≥Âá∫„Åó„Å´„ÅØË™çË®ºÊÉÖÂ†±„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

 * @summary ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÅÆÂèñÂæó
 */
export const useGetTermsHook = () => {
  const getTerms = useBackendCustomInstance<TermsOfService>();

  return () => {
    return getTerms({url: `/terms`, method: 'get'});
  };
};

export const getGetTermsQueryKey = () => [`/terms`];

export const useGetTerms = <
  TData = AsyncReturnType<ReturnType<typeof useGetTermsHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTermsHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTermsQueryKey();

  const getTerms = useGetTermsHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTermsHook>>> = () => getTerms();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTermsHook>>, TError, TData>(queryKey, queryFn, {
    cacheTime: 1000,
    staleTime: 1000,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „ÉÅ„Éº„É†„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„Çí‰ΩúÊàê„Åó„Åü„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØ ÁâπÊ®©„É¶„Éº„Ç∂„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÁôªÈå≤
 */
export const useGetTeamsHook = () => {
  const getTeams = useBackendCustomInstance<Team>();

  return (team: Team) => {
    return getTeams({url: `/teams`, method: 'post', data: team});
  };
};

export const useGetTeams = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<ReturnType<typeof useGetTeamsHook>>, TError, {data: Team}, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const getTeams = useGetTeamsHook();

  const mutationFn: MutationFunction<AsyncReturnType<ReturnType<typeof useGetTeamsHook>>, {data: Team}> = props => {
    const {data} = props || {};

    return getTeams(data);
  };

  return useMutation<AsyncReturnType<typeof getTeams>, TError, {data: Team}, TContext>(mutationFn, mutationOptions);
};

/**
 * „ÉÅ„Éº„É†ID„ÇíÊåáÂÆö„Åó„Å¶„ÄÅ„ÉÅ„Éº„É†„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèñÂæó
 */
export const useGetTeamsTeamIdHook = () => {
  const getTeamsTeamId = useBackendCustomInstance<Team>();

  return (teamId: string) => {
    return getTeamsTeamId({url: `/teams/${teamId}`, method: 'get'});
  };
};

export const getGetTeamsTeamIdQueryKey = (teamId: string) => [`/teams/${teamId}`];

export const useGetTeamsTeamId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdQueryKey(teamId);

  const getTeamsTeamId = useGetTeamsTeamIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>> = () =>
    getTeamsTeamId(teamId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>, TError, TData>(queryKey, queryFn, {
    enabled: !!teamId,
    cacheTime: 1000,
    staleTime: 1000,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „ÉÅ„Éº„É†„ÅÆÂèÇÂä†„Å´ÂøÖË¶Å„Å™ÊãõÂæÖ„Ç≥„Éº„Éâ„ÇíÁô∫Ë°å„Åó„Åæ„Åô„ÄÇ

 * @summary ÊãõÂæÖ„Ç≥„Éº„ÉâÁô∫Ë°å
 */
export const usePostTeamsTeamIdInvitationCodeHook = () => {
  const postTeamsTeamIdInvitationCode = useBackendCustomInstance<TeamInvitation>();

  return (teamId: string) => {
    return postTeamsTeamIdInvitationCode({url: `/teams/${teamId}/invitation-code`, method: 'post'});
  };
};

export const usePostTeamsTeamIdInvitationCode = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdInvitationCodeHook>>,
    TError,
    {teamId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdInvitationCode = usePostTeamsTeamIdInvitationCodeHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdInvitationCodeHook>>,
    {teamId: string}
  > = props => {
    const {teamId} = props || {};

    return postTeamsTeamIdInvitationCode(teamId);
  };

  return useMutation<AsyncReturnType<typeof postTeamsTeamIdInvitationCode>, TError, {teamId: string}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * „ÉÅ„Éº„É†„Å´ÂèÇÂä†„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèÇÂä†
 */
export const usePostTeamsTeamIdJoinHook = () => {
  const postTeamsTeamIdJoin = useBackendCustomInstance<Team>();

  return (teamId: string, teamInvitation: TeamInvitation) => {
    return postTeamsTeamIdJoin({url: `/teams/${teamId}/join`, method: 'post', data: teamInvitation});
  };
};

export const usePostTeamsTeamIdJoin = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdJoinHook>>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdJoin = usePostTeamsTeamIdJoinHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdJoinHook>>,
    {teamId: string; data: TeamInvitation}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdJoin(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdJoin>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ßÂèñÂæó
 */
export const useGetTeamsTeamIdTimetableTemplatesHook = () => {
  const getTeamsTeamIdTimetableTemplates = useBackendCustomInstance<TimetableTemplate[]>();

  return (teamId: string, params?: GetTeamsTeamIdTimetableTemplatesParams) => {
    return getTeamsTeamIdTimetableTemplates({url: `/teams/${teamId}/timetable-templates`, method: 'get', params});
  };
};

export const getGetTeamsTeamIdTimetableTemplatesQueryKey = (
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
) => [`/teams/${teamId}/timetable-templates`, ...(params ? [params] : [])];

export const useGetTeamsTeamIdTimetableTemplates = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesQueryKey(teamId, params);

  const getTeamsTeamIdTimetableTemplates = useGetTeamsTeamIdTimetableTemplatesHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>> = () =>
    getTeamsTeamIdTimetableTemplates(teamId, params);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!teamId, cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁôªÈå≤
 */
export const usePostTeamsTeamIdTimetableTemplatesHook = () => {
  const postTeamsTeamIdTimetableTemplates = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, timetableTemplate: TimetableTemplate) => {
    return postTeamsTeamIdTimetableTemplates({
      url: `/teams/${teamId}/timetable-templates`,
      method: 'post',
      data: timetableTemplate,
    });
  };
};

export const usePostTeamsTeamIdTimetableTemplates = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetableTemplatesHook>>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdTimetableTemplates = usePostTeamsTeamIdTimetableTemplatesHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetableTemplatesHook>>,
    {teamId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetableTemplates(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂèñÂæó
 */
export const useGetTeamsTeamIdTimetableTemplatesTemplateIdHook = () => {
  const getTeamsTeamIdTimetableTemplatesTemplateId = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, templateId: string) => {
    return getTeamsTeamIdTimetableTemplatesTemplateId({
      url: `/teams/${teamId}/timetable-templates/${templateId}`,
      method: 'get',
    });
  };
};

export const getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey = (teamId: string, templateId: string) => [
  `/teams/${teamId}/timetable-templates/${templateId}`,
];

export const useGetTeamsTeamIdTimetableTemplatesTemplateId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  templateId: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey(teamId, templateId);

  const getTeamsTeamIdTimetableTemplatesTemplateId = useGetTeamsTeamIdTimetableTemplatesTemplateIdHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>
  > = () => getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    TError,
    TData
  >(queryKey, queryFn, {enabled: !!(teamId && templateId), cacheTime: 1000, staleTime: 1000, ...queryOptions});

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊõ¥Êñ∞
 */
export const usePutTeamsTeamIdTimetableTemplatesTemplateIdHook = () => {
  const putTeamsTeamIdTimetableTemplatesTemplateId = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, templateId: string, timetableTemplate: TimetableTemplate) => {
    return putTeamsTeamIdTimetableTemplatesTemplateId({
      url: `/teams/${teamId}/timetable-templates/${templateId}`,
      method: 'put',
      data: timetableTemplate,
    });
  };
};

export const usePutTeamsTeamIdTimetableTemplatesTemplateId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putTeamsTeamIdTimetableTemplatesTemplateId = usePutTeamsTeamIdTimetableTemplatesTemplateIdHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    {teamId: string; templateId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, templateId, data} = props || {};

    return putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, data);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÂèñÂæó
 */
export const useGetTeamsTeamIdTimetablesTimetableIdHook = () => {
  const getTeamsTeamIdTimetablesTimetableId = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableId: string) => {
    return getTeamsTeamIdTimetablesTimetableId({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'get'});
  };
};

export const getGetTeamsTeamIdTimetablesTimetableIdQueryKey = (teamId: string, timetableId: string) => [
  `/teams/${teamId}/timetables/${timetableId}`,
];

export const useGetTeamsTeamIdTimetablesTimetableId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  timetableId: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesTimetableIdQueryKey(teamId, timetableId);

  const getTeamsTeamIdTimetablesTimetableId = useGetTeamsTeamIdTimetablesTimetableIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>> = () =>
    getTeamsTeamIdTimetablesTimetableId(teamId, timetableId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!(teamId && timetableId), cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„É°„É≥„Éê„Éº„Å´‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆÈñãÂßã„ÇíÈÄöÁü•„Åó„Åæ„Åô„ÄÇ
 * @summary ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤ÈñãÂßã
 */
export const usePutTeamsTeamIdTimetablesTimetableIdHook = () => {
  const putTeamsTeamIdTimetablesTimetableId = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableId: string) => {
    return putTeamsTeamIdTimetablesTimetableId({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'put'});
  };
};

export const usePutTeamsTeamIdTimetablesTimetableId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetablesTimetableIdHook>>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putTeamsTeamIdTimetablesTimetableId = usePutTeamsTeamIdTimetablesTimetableIdHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetablesTimetableIdHook>>,
    {teamId: string; timetableId: string}
  > = props => {
    const {teamId, timetableId} = props || {};

    return putTeamsTeamIdTimetablesTimetableId(teamId, timetableId);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤‰∏ÄË¶ßÂèñÂæó
 */
export const useGetTeamsTeamIdTimetablesHook = () => {
  const getTeamsTeamIdTimetables = useBackendCustomInstance<TimetableOfDay[]>();

  return (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => {
    return getTeamsTeamIdTimetables({url: `/teams/${teamId}/timetables`, method: 'get', params});
  };
};

export const getGetTeamsTeamIdTimetablesQueryKey = (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => [
  `/teams/${teamId}/timetables`,
  ...(params ? [params] : []),
];

export const useGetTeamsTeamIdTimetables = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetablesParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesQueryKey(teamId, params);

  const getTeamsTeamIdTimetables = useGetTeamsTeamIdTimetablesHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>> = () =>
    getTeamsTeamIdTimetables(teamId, params);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!teamId, cacheTime: 1000, staleTime: 1000, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÁôªÈå≤
 */
export const usePostTeamsTeamIdTimetablesHook = () => {
  const postTeamsTeamIdTimetables = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableOfDayInput: TimetableOfDayInput) => {
    return postTeamsTeamIdTimetables({url: `/teams/${teamId}/timetables`, method: 'post', data: timetableOfDayInput});
  };
};

export const usePostTeamsTeamIdTimetables = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetablesHook>>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdTimetables = usePostTeamsTeamIdTimetablesHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetablesHook>>,
    {teamId: string; data: TimetableOfDayInput}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetables(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetables>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >(mutationFn, mutationOptions);
};
