/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  Team,
  TeamInvitation,
  TimetableTemplate,
  GetTeamsTeamIdTimetableTemplatesParams,
  TimetableOfDay,
  GetTeamsTeamIdTimetablesParams,
  TimetableOfDayInput,
} from '.././model';
import {useBackendCustomInstance, ErrorType} from '../../../framework/backend/useCustomInstance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * „ÉÅ„Éº„É†„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„Çí‰ΩúÊàê„Åó„Åü„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØ ÁâπÊ®©„É¶„Éº„Ç∂„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÁôªÈå≤
 */
export const usePostTeamsHook = () => {
  const postTeams = useBackendCustomInstance<Team>();

  return (team: Team) => {
    return postTeams({url: `/teams`, method: 'post', data: team});
  };
};

export const usePostTeams = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<ReturnType<typeof usePostTeamsHook>>, TError, {data: Team}, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeams = usePostTeamsHook();

  const mutationFn: MutationFunction<AsyncReturnType<ReturnType<typeof usePostTeamsHook>>, {data: Team}> = props => {
    const {data} = props || {};

    return postTeams(data);
  };

  return useMutation<AsyncReturnType<typeof postTeams>, TError, {data: Team}, TContext>(mutationFn, mutationOptions);
};
/**
 * „ÉÅ„Éº„É†ID„ÇíÊåáÂÆö„Åó„Å¶„ÄÅ„ÉÅ„Éº„É†„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèñÂæó
 */
export const useGetTeamsTeamIdHook = () => {
  const getTeamsTeamId = useBackendCustomInstance<Team>();

  return (teamId: string) => {
    return getTeamsTeamId({url: `/teams/${teamId}`, method: 'get'});
  };
};

export const getGetTeamsTeamIdQueryKey = (teamId: string) => [`/teams/${teamId}`];

export const useGetTeamsTeamId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdQueryKey(teamId);

  const getTeamsTeamId = useGetTeamsTeamIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>> = () =>
    getTeamsTeamId(teamId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdHook>>, TError, TData>(queryKey, queryFn, {
    enabled: !!teamId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „ÉÅ„Éº„É†„ÅÆÂèÇÂä†„Å´ÂøÖË¶Å„Å™ÊãõÂæÖ„Ç≥„Éº„Éâ„ÇíÁô∫Ë°å„Åó„Åæ„Åô„ÄÇ

 * @summary ÊãõÂæÖ„Ç≥„Éº„ÉâÁô∫Ë°å
 */
export const usePostTeamsTeamIdInvitationCodeHook = () => {
  const postTeamsTeamIdInvitationCode = useBackendCustomInstance<TeamInvitation>();

  return (teamId: string) => {
    return postTeamsTeamIdInvitationCode({url: `/teams/${teamId}/invitation-code`, method: 'post'});
  };
};

export const usePostTeamsTeamIdInvitationCode = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdInvitationCodeHook>>,
    TError,
    {teamId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdInvitationCode = usePostTeamsTeamIdInvitationCodeHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdInvitationCodeHook>>,
    {teamId: string}
  > = props => {
    const {teamId} = props || {};

    return postTeamsTeamIdInvitationCode(teamId);
  };

  return useMutation<AsyncReturnType<typeof postTeamsTeamIdInvitationCode>, TError, {teamId: string}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * „ÉÅ„Éº„É†„Å´ÂèÇÂä†„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèÇÂä†
 */
export const usePostTeamsTeamIdJoinHook = () => {
  const postTeamsTeamIdJoin = useBackendCustomInstance<Team>();

  return (teamId: string, teamInvitation: TeamInvitation) => {
    return postTeamsTeamIdJoin({url: `/teams/${teamId}/join`, method: 'post', data: teamInvitation});
  };
};

export const usePostTeamsTeamIdJoin = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdJoinHook>>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdJoin = usePostTeamsTeamIdJoinHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdJoinHook>>,
    {teamId: string; data: TeamInvitation}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdJoin(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdJoin>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ßÂèñÂæó
 */
export const useGetTeamsTeamIdTimetableTemplatesHook = () => {
  const getTeamsTeamIdTimetableTemplates = useBackendCustomInstance<TimetableTemplate[]>();

  return (teamId: string, params?: GetTeamsTeamIdTimetableTemplatesParams) => {
    return getTeamsTeamIdTimetableTemplates({url: `/teams/${teamId}/timetable-templates`, method: 'get', params});
  };
};

export const getGetTeamsTeamIdTimetableTemplatesQueryKey = (
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
) => [`/teams/${teamId}/timetable-templates`, ...(params ? [params] : [])];

export const useGetTeamsTeamIdTimetableTemplates = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesQueryKey(teamId, params);

  const getTeamsTeamIdTimetableTemplates = useGetTeamsTeamIdTimetableTemplatesHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>> = () =>
    getTeamsTeamIdTimetableTemplates(teamId, params);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!teamId, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁôªÈå≤
 */
export const usePostTeamsTeamIdTimetableTemplatesHook = () => {
  const postTeamsTeamIdTimetableTemplates = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, timetableTemplate: TimetableTemplate) => {
    return postTeamsTeamIdTimetableTemplates({
      url: `/teams/${teamId}/timetable-templates`,
      method: 'post',
      data: timetableTemplate,
    });
  };
};

export const usePostTeamsTeamIdTimetableTemplates = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetableTemplatesHook>>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdTimetableTemplates = usePostTeamsTeamIdTimetableTemplatesHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetableTemplatesHook>>,
    {teamId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetableTemplates(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂèñÂæó
 */
export const useGetTeamsTeamIdTimetableTemplatesTemplateIdHook = () => {
  const getTeamsTeamIdTimetableTemplatesTemplateId = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, templateId: string) => {
    return getTeamsTeamIdTimetableTemplatesTemplateId({
      url: `/teams/${teamId}/timetable-templates/${templateId}`,
      method: 'get',
    });
  };
};

export const getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey = (teamId: string, templateId: string) => [
  `/teams/${teamId}/timetable-templates/${templateId}`,
];

export const useGetTeamsTeamIdTimetableTemplatesTemplateId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  templateId: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey(teamId, templateId);

  const getTeamsTeamIdTimetableTemplatesTemplateId = useGetTeamsTeamIdTimetableTemplatesTemplateIdHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>
  > = () => getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    TError,
    TData
  >(queryKey, queryFn, {enabled: !!(teamId && templateId), ...queryOptions});

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊõ¥Êñ∞
 */
export const usePutTeamsTeamIdTimetableTemplatesTemplateIdHook = () => {
  const putTeamsTeamIdTimetableTemplatesTemplateId = useBackendCustomInstance<TimetableTemplate>();

  return (teamId: string, templateId: string, timetableTemplate: TimetableTemplate) => {
    return putTeamsTeamIdTimetableTemplatesTemplateId({
      url: `/teams/${teamId}/timetable-templates/${templateId}`,
      method: 'put',
      data: timetableTemplate,
    });
  };
};

export const usePutTeamsTeamIdTimetableTemplatesTemplateId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putTeamsTeamIdTimetableTemplatesTemplateId = usePutTeamsTeamIdTimetableTemplatesTemplateIdHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetableTemplatesTemplateIdHook>>,
    {teamId: string; templateId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, templateId, data} = props || {};

    return putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, data);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÂèñÂæó
 */
export const useGetTeamsTeamIdTimetablesTimetableIdHook = () => {
  const getTeamsTeamIdTimetablesTimetableId = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableId: string) => {
    return getTeamsTeamIdTimetablesTimetableId({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'get'});
  };
};

export const getGetTeamsTeamIdTimetablesTimetableIdQueryKey = (teamId: string, timetableId: string) => [
  `/teams/${teamId}/timetables/${timetableId}`,
];

export const useGetTeamsTeamIdTimetablesTimetableId = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  timetableId: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesTimetableIdQueryKey(teamId, timetableId);

  const getTeamsTeamIdTimetablesTimetableId = useGetTeamsTeamIdTimetablesTimetableIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>> = () =>
    getTeamsTeamIdTimetablesTimetableId(teamId, timetableId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesTimetableIdHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!(teamId && timetableId), ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„É°„É≥„Éê„Éº„Å´‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆÈñãÂßã„ÇíÈÄöÁü•„Åó„Åæ„Åô„ÄÇ
 * @summary ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤ÈñãÂßã
 */
export const usePutTeamsTeamIdTimetablesTimetableIdHook = () => {
  const putTeamsTeamIdTimetablesTimetableId = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableId: string) => {
    return putTeamsTeamIdTimetablesTimetableId({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'put'});
  };
};

export const usePutTeamsTeamIdTimetablesTimetableId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetablesTimetableIdHook>>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putTeamsTeamIdTimetablesTimetableId = usePutTeamsTeamIdTimetablesTimetableIdHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutTeamsTeamIdTimetablesTimetableIdHook>>,
    {teamId: string; timetableId: string}
  > = props => {
    const {teamId, timetableId} = props || {};

    return putTeamsTeamIdTimetablesTimetableId(teamId, timetableId);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤‰∏ÄË¶ßÂèñÂæó
 */
export const useGetTeamsTeamIdTimetablesHook = () => {
  const getTeamsTeamIdTimetables = useBackendCustomInstance<TimetableOfDay[]>();

  return (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => {
    return getTeamsTeamIdTimetables({url: `/teams/${teamId}/timetables`, method: 'get', params});
  };
};

export const getGetTeamsTeamIdTimetablesQueryKey = (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => [
  `/teams/${teamId}/timetables`,
  ...(params ? [params] : []),
];

export const useGetTeamsTeamIdTimetables = <
  TData = AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetablesParams,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesQueryKey(teamId, params);

  const getTeamsTeamIdTimetables = useGetTeamsTeamIdTimetablesHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>> = () =>
    getTeamsTeamIdTimetables(teamId, params);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetTeamsTeamIdTimetablesHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!teamId, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÁôªÈå≤
 */
export const usePostTeamsTeamIdTimetablesHook = () => {
  const postTeamsTeamIdTimetables = useBackendCustomInstance<TimetableOfDay>();

  return (teamId: string, timetableOfDayInput: TimetableOfDayInput) => {
    return postTeamsTeamIdTimetables({url: `/teams/${teamId}/timetables`, method: 'post', data: timetableOfDayInput});
  };
};

export const usePostTeamsTeamIdTimetables = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetablesHook>>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postTeamsTeamIdTimetables = usePostTeamsTeamIdTimetablesHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostTeamsTeamIdTimetablesHook>>,
    {teamId: string; data: TimetableOfDayInput}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetables(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetables>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >(mutationFn, mutationOptions);
};
