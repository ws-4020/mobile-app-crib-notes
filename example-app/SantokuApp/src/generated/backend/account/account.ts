/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  Account,
  BadRequestResponse,
  AccountRegistration,
  AccountLoginResponse,
  UnauthorizedResponse,
  AccountLogin,
  ForbiddenResponse,
  AvatarImage,
  UpdateDeviceToken,
  TermsOfServiceAgreementStatus,
  AccountDeletion,
} from '.././model';
import {useBackendCustomInstance, ErrorType} from '../../../framework/backend/useCustomInstance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤„Å´„ÅØ„ÄÅ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤
 */
export const usePostSignupHook = () => {
  const postSignup = useBackendCustomInstance<Account>();

  return (accountRegistration: AccountRegistration) => {
    return postSignup({url: `/signup`, method: 'post', data: accountRegistration});
  };
};

export const usePostSignup = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostSignupHook>>,
    TError,
    {data: AccountRegistration},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postSignup = usePostSignupHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostSignupHook>>,
    {data: AccountRegistration}
  > = props => {
    const {data} = props || {};

    return postSignup(data);
  };

  return useMutation<AsyncReturnType<typeof postSignup>, TError, {data: AccountRegistration}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÊåáÂÆö„Åó„Å¶„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const usePostLoginHook = () => {
  const postLogin = useBackendCustomInstance<AccountLoginResponse>();

  return (accountLogin: AccountLogin) => {
    return postLogin({url: `/login`, method: 'post', data: accountLogin});
  };
};

export const usePostLogin = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostLoginHook>>,
    TError,
    {data: AccountLogin},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postLogin = usePostLoginHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostLoginHook>>,
    {data: AccountLogin}
  > = props => {
    const {data} = props || {};

    return postLogin(data);
  };

  return useMutation<AsyncReturnType<typeof postLogin>, TError, {data: AccountLogin}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà„Åô„Çã
 */
export const usePostLogoutHook = () => {
  const postLogout = useBackendCustomInstance<void>();

  return () => {
    return postLogout({url: `/logout`, method: 'post'});
  };
};

export const usePostLogout = <
  TError = ErrorType<BadRequestResponse | ForbiddenResponse>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<ReturnType<typeof usePostLogoutHook>>, TError, TVariables, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postLogout = usePostLogoutHook();

  const mutationFn: MutationFunction<AsyncReturnType<ReturnType<typeof usePostLogoutHook>>, TVariables> = () => {
    return postLogout();
  };

  return useMutation<AsyncReturnType<typeof postLogout>, TError, TVariables, TContext>(mutationFn, mutationOptions);
};
/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Çí„Ç≠„Éº„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsAccountIdHook = () => {
  const getAccountsAccountId = useBackendCustomInstance<Account>();

  return (accountId: string) => {
    return getAccountsAccountId({url: `/accounts/${accountId}`, method: 'get'});
  };
};

export const getGetAccountsAccountIdQueryKey = (accountId: string) => [`/accounts/${accountId}`];

export const useGetAccountsAccountId = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdQueryKey(accountId);

  const getAccountsAccountId = useGetAccountsAccountIdHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>> = () =>
    getAccountsAccountId(accountId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!accountId, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsAccountIdAvatarHook = () => {
  const getAccountsAccountIdAvatar = useBackendCustomInstance<AvatarImage>();

  return (accountId: string) => {
    return getAccountsAccountIdAvatar({url: `/accounts/${accountId}/avatar`, method: 'get'});
  };
};

export const getGetAccountsAccountIdAvatarQueryKey = (accountId: string) => [`/accounts/${accountId}/avatar`];

export const useGetAccountsAccountIdAvatar = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdAvatarQueryKey(accountId);

  const getAccountsAccountIdAvatar = useGetAccountsAccountIdAvatarHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>> = () =>
    getAccountsAccountIdAvatar(accountId);

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsAccountIdAvatarHook>>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!accountId, ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsMeHook = () => {
  const getAccountsMe = useBackendCustomInstance<Account>();

  return () => {
    return getAccountsMe({url: `/accounts/me`, method: 'get'});
  };
};

export const getGetAccountsMeQueryKey = () => [`/accounts/me`];

export const useGetAccountsMe = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>,
  TError = ErrorType<ForbiddenResponse>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeQueryKey();

  const getAccountsMe = useGetAccountsMeHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>> = () => getAccountsMe();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsMeAvatarHook = () => {
  const getAccountsMeAvatar = useBackendCustomInstance<AvatarImage>();

  return () => {
    return getAccountsMeAvatar({url: `/accounts/me/avatar`, method: 'get'});
  };
};

export const getGetAccountsMeAvatarQueryKey = () => [`/accounts/me/avatar`];

export const useGetAccountsMeAvatar = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeAvatarQueryKey();

  const getAccountsMeAvatar = useGetAccountsMeAvatarHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>> = () =>
    getAccountsMeAvatar();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeAvatarHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã
 */
export const usePutAccountsMeAvatarHook = () => {
  const putAccountsMeAvatar = useBackendCustomInstance<void>();

  return (avatarImage: AvatarImage) => {
    const formData = new FormData();
    if (avatarImage.avatarImage !== undefined) {
      formData.append('avatarImage', avatarImage.avatarImage);
    }

    return putAccountsMeAvatar({url: `/accounts/me/avatar`, method: 'put', data: formData});
  };
};

export const usePutAccountsMeAvatar = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePutAccountsMeAvatarHook>>,
    TError,
    {data: AvatarImage},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const putAccountsMeAvatar = usePutAccountsMeAvatarHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePutAccountsMeAvatarHook>>,
    {data: AvatarImage}
  > = props => {
    const {data} = props || {};

    return putAccountsMeAvatar(data);
  };

  return useMutation<AsyncReturnType<typeof putAccountsMeAvatar>, TError, {data: AvatarImage}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÇíÊõ¥Êñ∞„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÅÆÊõ¥Êñ∞
 */
export const usePostAccountsMeDeviceTokenHook = () => {
  const postAccountsMeDeviceToken = useBackendCustomInstance<void>();

  return (updateDeviceToken: UpdateDeviceToken) => {
    return postAccountsMeDeviceToken({url: `/accounts/me/device-token`, method: 'post', data: updateDeviceToken});
  };
};

export const usePostAccountsMeDeviceToken = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeDeviceTokenHook>>,
    TError,
    {data: UpdateDeviceToken},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postAccountsMeDeviceToken = usePostAccountsMeDeviceTokenHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeDeviceTokenHook>>,
    {data: UpdateDeviceToken}
  > = props => {
    const {data} = props || {};

    return postAccountsMeDeviceToken(data);
  };

  return useMutation<AsyncReturnType<typeof postAccountsMeDeviceToken>, TError, {data: UpdateDeviceToken}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å¶„ÅÑ„Çã„Åã„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑèÁä∂ÊÖãÁ¢∫Ë™ç
 */
export const useGetAccountsMeTermsHook = () => {
  const getAccountsMeTerms = useBackendCustomInstance<TermsOfServiceAgreementStatus>();

  return () => {
    return getAccountsMeTerms({url: `/accounts/me/terms`, method: 'get'});
  };
};

export const getGetAccountsMeTermsQueryKey = () => [`/accounts/me/terms`];

export const useGetAccountsMeTerms = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeTermsQueryKey();

  const getAccountsMeTerms = useGetAccountsMeTermsHook();

  const queryFn: QueryFunction<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>> = () =>
    getAccountsMeTerms();

  const query = useQuery<AsyncReturnType<ReturnType<typeof useGetAccountsMeTermsHook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„Åä„ÅÑ„Å¶„ÄÅÊåáÂÆö„Åï„Çå„ÅüÂà©Áî®Ë¶èÁ¥Ñ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑè
 */
export const usePostAccountsMeTermsHook = () => {
  const postAccountsMeTerms = useBackendCustomInstance<TermsOfServiceAgreementStatus>();

  return (termsOfServiceAgreementStatus: TermsOfServiceAgreementStatus) => {
    return postAccountsMeTerms({url: `/accounts/me/terms`, method: 'post', data: termsOfServiceAgreementStatus});
  };
};

export const usePostAccountsMeTerms = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeTermsHook>>,
    TError,
    {data: TermsOfServiceAgreementStatus},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const postAccountsMeTerms = usePostAccountsMeTermsHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof usePostAccountsMeTermsHook>>,
    {data: TermsOfServiceAgreementStatus}
  > = props => {
    const {data} = props || {};

    return postAccountsMeTerms(data);
  };

  return useMutation<
    AsyncReturnType<typeof postAccountsMeTerms>,
    TError,
    {data: TermsOfServiceAgreementStatus},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇ

„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂâäÈô§„Å´„Éë„Çπ„ÉØ„Éº„Éâ„ÇíË¶ÅÊ±Ç„Åô„Çã„ÅÆ„Åß„ÄÅDELETE„É°„ÇΩ„ÉÉ„Éâ„Åß„ÅØ„Å™„ÅèPOST„É°„ÇΩ„ÉÉ„Éâ„ÇíÂà©Áî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ

ÂèÇËÄÉ: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)

> A payload within a DELETE request message has no defined semantics;
> sending a payload body on a DELETE request might cause some existing
> implementations to reject the request.

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const useDeleteAccountsMeDeleteHook = () => {
  const deleteAccountsMeDelete = useBackendCustomInstance<void>();

  return (accountDeletion: AccountDeletion) => {
    return deleteAccountsMeDelete({url: `/accounts/me/delete`, method: 'post', data: accountDeletion});
  };
};

export const useDeleteAccountsMeDelete = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useDeleteAccountsMeDeleteHook>>,
    TError,
    {data: AccountDeletion},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const deleteAccountsMeDelete = useDeleteAccountsMeDeleteHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useDeleteAccountsMeDeleteHook>>,
    {data: AccountDeletion}
  > = props => {
    const {data} = props || {};

    return deleteAccountsMeDelete(data);
  };

  return useMutation<AsyncReturnType<typeof deleteAccountsMeDelete>, TError, {data: AccountDeletion}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
