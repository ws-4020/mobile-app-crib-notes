// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PickerBackdrop only with required props renders successfully only with required props: AnimatedView with invisible. 1`] = `
<Modal
  animationType="none"
  hardwareAccelerated={false}
  statusBarTranslucent={true}
  transparent={true}
  visible={true}
/>
`;

exports[`PickerBackdrop only with required props renders successfully only with required props: AnimatedView with visible. 1`] = `
<Modal
  animationType="none"
  hardwareAccelerated={false}
  statusBarTranslucent={true}
  transparent={true}
  visible={true}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "bottom": 0,
          "display": "flex",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        undefined,
      ]
    }
  >
    <View
      animatedStyle={
        Object {
          "value": Object {},
        }
      }
      collapsable={false}
      entering={
        FadeIn {
          "build": [Function],
          "callbackV": [Function],
          "durationV": 300,
          "randomizeDelay": false,
        }
      }
      exiting={
        FadeOut {
          "build": [Function],
          "callbackV": [Function],
          "durationV": 150,
          "randomizeDelay": false,
        }
      }
      style={
        Object {
          "backgroundColor": "rgba(0,0,0,0.4)",
          "flex": 1,
        }
      }
      testID="backdropAnimated"
    />
  </View>
</Modal>
`;

exports[`PickerBackdrop with all props should be applied properly: PickerBackdrop with all props. 1`] = `
<Modal
  animationType="fade"
  hardwareAccelerated={false}
  onRequestClose={[MockFunction]}
  presentationStyle="fullScreen"
  statusBarTranslucent={false}
  style={
    Object {
      "backgroundColor": "yellow",
    }
  }
  testID="modal"
  transparent={false}
  visible={true}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "bottom": 0,
          "display": "flex",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        },
        Object {
          "display": "none",
        },
      ]
    }
    testID="pressable"
  >
    <View
      animatedStyle={
        Object {
          "value": Object {},
        }
      }
      collapsable={false}
      entering={
        ZoomIn {
          "build": [Function],
          "callbackV": [Function],
          "durationV": 500,
          "randomizeDelay": false,
        }
      }
      exiting={
        ZoomOut {
          "build": [Function],
          "callbackV": [Function],
          "durationV": 300,
          "randomizeDelay": false,
        }
      }
      style={
        Object {
          "backgroundColor": "green",
          "flex": 2,
        }
      }
      testID="animatedView"
    />
  </View>
</Modal>
`;
