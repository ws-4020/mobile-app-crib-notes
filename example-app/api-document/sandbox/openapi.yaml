openapi: 3.0.3
info:
  title: SantokuApp Sandbox REST API
  version: 1.0.0
  description: SantokuApp Sandbox REST API
  contact: {}
tags: []
servers:
  - url: 'http://localhost:9080/api/sandbox'
security:
  - Session: []
paths:
  /todos:
    get:
      summary: List todo
      description: List todo
      tags: []
      operationId: list-todo
      parameters:
        - name: page
          in: query
          description: ページ番号
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTodoResponse'
              examples:
                firstPage:
                  value:
                    currentPage: 1
                    nextPage: 2
                    data:
                      - id: 1
                        title: Title 1
                        description: Description 2
                      - id: 2
                        title: Title 2
                        description: Description 2
                lastPage:
                  value:
                    currentPage: 25
                    nextPage: null
                    data:
                      - id: 500
                        title: Title 500
                        description: Description 500
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create todo
      description: Create todo
      tags: []
      operationId: post-todo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRegistration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
  '/todos/{todoId}':
    parameters:
      - name: todoId
        in: path
        description: Todo ID
        required: true
        schema:
          type: string
    get:
      summary: Get todo
      description: Get todo
      tags: []
      operationId: get-todo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update todo
      description: Update todo
      tags: []
      operationId: put-todo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRegistration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete todo
      description: Delete todo
      tags: []
      operationId: delete-todo
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    Todo:
      title: Todo
      type: object
      description: Todo
      properties:
        id:
          type: number
          description: Todo Id
        title:
          type: string
          description: Todo title
        description:
          type: string
          description: Todo description
      required:
        - id
        - title
        - description
    TodoRegistration:
      title: TodoRegistration
      type: object
      description: TodoRegistration
      properties:
        title:
          type: string
          description: Todo title
        description:
          type: string
          description: Todo description
      required:
        - title
        - description
    ListTodoResponse:
      title: ListTodoResponse
      type: object
      description: ListTodoResponse
      properties:
        currentPage:
          type: number
          description: Current page number
        nextPage:
          type: number
          description: Next page number (return null if not exists)
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
      required:
        - currentPage
        - nextPage
        - data
    ErrorResponse:
      title: Error
      type: object
      description: Error Response
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    PayloadTooLarge:
      description: Payload Too Large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    Session:
      type: apiKey
      in: cookie
      name: NABLARCH_SID
      description: Nablarch session id
