trigger: none

name: $(date:yyyyMMdd)$(rev:.rr)

parameters:
- name: buildVariants
  type: object
  default:
    - name: 'devSantokuAppDebugAdvanced'
      laneName: 'dev_debug_advanced'
      androidAppPath: 'android/app/build/outputs/bundle/devSantokuAppDebugAdvanced/app-devSantokuApp-debugAdvanced.aab
      iOSAppPath: 'ios/build/DevSantokuAppDebugAdvanced.ipa'
      requireKeyStoreFile: false
    - name: 'devSantokuAppReleaseInHouse'
      laneName: 'dev_release_in_house'
      androidAppPath: 'android/app/build/outputs/bundle/devSantokuAppReleaseInHouse/app-devSantokuApp-releaseInHouse.aab'
      iOSAppPath: 'ios/build/DevSantokuAppReleaseInHouse.ipa'
      requireKeyStoreFile: true
    - name: 'santokuAppDebugAdvanced'
      laneName: 'debug_advanced'
      androidAppPath: 'android/app/build/outputs/bundle/santokuAppDebugAdvanced/app-santokuApp-debugAdvanced.aab'
      iOSAppPath: 'ios/build/SantokuAppDebugAdvanced.ipa'
      requireKeyStoreFile: false
    - name: 'santokuAppReleaseInHouse'
      laneName: 'release_in_house'
      androidAppPath: 'android/app/build/outputs/bundle/santokuAppReleaseInHouse/app-santokuApp-releaseInHouse.aab'
      iOSAppPath: 'ios/build/SantokuAppReleaseInHouse.ipa'
      requireKeyStoreFile: true

variables:
- group: apple
- group: deployGate
- group: devSantokuAppDebugAdvanced
- group: devSantokuAppReleaseInHouse
- group: santokuAppDebugAdvanced
- group: santokuAppReleaseInHouse
- name: appDir
  value: '$(System.DefaultWorkingDirectory)/example-app/SantokuApp'
- name: branchName
  value: '$(Build.SourceBranch)'

stages:
- stage: Android
  displayName: Build Android Applications
  jobs:
  - job: build_android_app
    displayName: 'Build Android Apps'
    pool:
      vmImage: macOS-11
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: '16.x'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: 'ci'
        workingDir: '$(appDir)'
        verbose: false
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: CmdLine@2
        displayName: 'Build Android app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane android ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
        condition: eq('${{buildVariant.requireKeyStoreFile}}', 'false')
      - task: CmdLine@2
        displayName: 'Upload app to DeployGate'
        inputs:
          script: |
            curl -X POST -H "Authorization: token $(deployGate_OrganizationApiKey)" "https://deploygate.com/api/users/$(deployGate_OrganizationName)/apps" -F "file=@${{buildVariant.androidAppPath}}" -F "distribution_name=$(branchName)" -F "message=Build $(branchName) with Azure Pipeline"
          workingDirectory: '$(appDir)'
        condition: eq('${{buildVariant.requireKeyStoreFile}}', 'false')
    - task: CopyFiles@2
      displayName: 'Copy aab files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(appDir)/android/app/build/outputs'
        Contents: '**/*.aab'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

- stage: iOS
  displayName: Build iOS Applications
  jobs:
  - job: build_ios_app
    displayName: 'Build iOS Apps'
    pool:
      vmImage: macOS-11
    steps:
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate for ${{buildVariant.name}}'
        inputs:
          certSecureFile: $(Apple_DevelopmentCertificateSecureFileUUID)
          certPwd: $(Apple_DevelopmentCertificatePassword)
      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate for ${{buildVariant.name}}'
        inputs:
          certSecureFile: $(Apple_DistributionCertificateSecureFileUUID)
          certPwd: $(Apple_DistributionCertificatePassword)
      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile for ${{buildVariant.name}}'
        inputs:
          provProfileSecureFile: $(${{buildVariant.name}}_AppleDevelopmentProvisioningProfileSecureFileUUID)
      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile for ${{buildVariant.name}}'
        inputs:
          provProfileSecureFile: $(${{buildVariant.name}}_AppleDistributionProvisioningProfileSecureFileUUID)
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: '16.x'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: ci
        workingDir: '$(appDir)'
        verbose: false
    - task: CmdLine@2
      displayName: 'bundle install'
      inputs:
        script: 'bundle install'
        workingDirectory: '$(appDir)'
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: CmdLine@2
        displayName: 'Build iOS app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane ios ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
      - task: CmdLine@2
        displayName: 'Upload app to DeployGate'
        inputs:
          script: |
            curl -X POST -H "Authorization: token $(deployGate_OrganizationApiKey)" "https://deploygate.com/api/users/$(deployGate_OrganizationName)/apps" -F "file=@${{buildVariant.iOSAppPath}}" -F "distribution_name=$(branchName)" -F "message=Build $(branchName) with Azure Pipeline"
          workingDirectory: '$(appDir)'
    - task: CopyFiles@2
      displayName: 'Copy artifacts to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(appDir)/ios'
        Contents: '**/*.ipa'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
