trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - 'example-app/SantokuApp'
    exclude:
      - 'example-app/SantokuApp/README.md'

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'example-app/SantokuApp'
    exclude:
      - 'example-app/SantokuApp/README.md'
  drafts: false

name: $(date:yyyyMMdd)$(rev:.rr)

parameters:
- name: buildVariants
  type: object
  default:
    - name: 'devSantokuAppDebugAdvanced'
      laneName: 'dev_debug_advanced'
      buildType: 'debugAdvanced'
      androidAppPath: 'android/app/build/outputs/bundle/devSantokuAppDebugAdvanced/app-devSantokuApp-debugAdvanced.aab'
      iOSAppPath: 'ios/build/DevSantokuAppDebugAdvanced.ipa'
    - name: 'devSantokuAppReleaseInHouse'
      laneName: 'dev_release_in_house'
      buildType: 'releaseInHouse'
      androidAppPath: 'android/app/build/outputs/bundle/devSantokuAppReleaseInHouse/app-devSantokuApp-releaseInHouse.aab'
      iOSAppPath: 'ios/build/DevSantokuAppReleaseInHouse.ipa'
    - name: 'santokuAppDebugAdvanced'
      laneName: 'debug_advanced'
      buildType: 'debugAdvanced'
      androidAppPath: 'android/app/build/outputs/bundle/santokuAppDebugAdvanced/app-santokuApp-debugAdvanced.aab'
      iOSAppPath: 'ios/build/SantokuAppDebugAdvanced.ipa'
    - name: 'santokuAppReleaseInHouse'
      laneName: 'release_in_house'
      buildType: 'releaseInHouse'
      androidAppPath: 'android/app/build/outputs/bundle/santokuAppReleaseInHouse/app-santokuApp-releaseInHouse.aab'
      iOSAppPath: 'ios/build/SantokuAppReleaseInHouse.ipa'

variables:
- group: android
- group: apple
- group: deployGate
- group: devSantokuAppDebugAdvanced
- group: devSantokuAppReleaseInHouse
- group: santokuAppDebugAdvanced
- group: santokuAppReleaseInHouse
- name: appDir
  value: '$(System.DefaultWorkingDirectory)/example-app/SantokuApp'
- name: branchName
  value: '$(Build.SourceBranchName)'

stages:
- stage: Android
  displayName: Build Android Applications
  jobs:
  - job: build_android_app
    displayName: 'Build Android Apps'
    pool:
      vmImage: macOS-11
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 16.12.0'
      inputs:
        versionSpec: '16.12.0'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: 'ci'
        workingDir: '$(appDir)'
        verbose: false
    - task: DownloadSecureFile@1
      displayName: 'Download Keystore file for ReleaseInHouse'
      inputs:
        secureFile: $(android_ReleaseInHouseKeyStoreSecureFileName)
    - task: CopyFiles@2
      displayName: 'Copy Keystore file to: $(appDir)/android/app'
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: $(android_ReleaseInHouseKeyStoreSecureFileName)
        TargetFolder: '$(appDir)/android/app'
    - task: CmdLine@2
      displayName: 'Add gradle.properties settings for ReleaseInHouse'
      inputs:
        script: |
          echo '# Keystore properties for ReleaseInHouse' >> gradle.properties
          echo 'SANTOKU_APP_IN_HOUSE_KEYSTORE_FILE=$(android_ReleaseInHouseKeyStoreSecureFileName)' >> gradle.properties
          echo 'SANTOKU_APP_IN_HOUSE_KEYSTORE_PASSWORD=$(android_ReleaseInHouseKeyStorePassword)' >> gradle.properties
          echo 'SANTOKU_APP_IN_HOUSE_KEY_ALIAS=$(android_ReleaseInHouseKeyAlias)' >> gradle.properties
          echo 'SANTOKU_APP_IN_HOUSE_KEY_PASSWORD=$(android_ReleaseInHouseKeyPassword)' >> gradle.properties
        workingDirectory: '$(appDir)/android'
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: DownloadSecureFile@1
        name: googleServicesJson${{buildVariant.name}}
        displayName: 'Download google-services.json file for ${{buildVariant.name}}'
        inputs:
          secureFile: $(${{buildVariant.name}}_GoogleServicesJsonSecureFileName)
      - task: CopyFiles@2
        displayName: 'Copy google-services.json file to: $(appDir)/android/app/src/${{buildVariant.buildType}}'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: $(${{buildVariant.name}}_GoogleServicesJsonSecureFileName)
          TargetFolder: '$(appDir)/android/app/src/${{buildVariant.buildType}}'
      - task: CmdLine@2
        displayName: 'Rename google-services.json'
        inputs:
          script: |
            /bin/mv $(${{buildVariant.name}}_GoogleServicesJsonSecureFileName) google-services.json
          workingDirectory: '$(appDir)/android/app/src/${{buildVariant.buildType}}'
      - task: CmdLine@2
        displayName: 'Build Android app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane android ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
      - task: CmdLine@2
        displayName: 'Upload app to DeployGate'
        inputs:
          script: |
            curl -X POST -H "Authorization: token $(deployGate_OrganizationApiKey)" "https://deploygate.com/api/users/$(deployGate_OrganizationName)/apps" -F "file=@${{buildVariant.androidAppPath}}" -F "distribution_name=$(branchName)" -F "message=Build $(branchName) with Azure Pipeline"
          workingDirectory: '$(appDir)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(appDir)/android/app/build/outputs'
        artifactType: 'pipeline'
        artifactName: 'aab'
        parallel: true
      condition: succeeded()

- stage: iOS
  displayName: Build iOS Applications
  jobs:
  - job: build_ios_app
    displayName: 'Build iOS Apps'
    pool:
      vmImage: macOS-11
    steps:
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate for ${{buildVariant.name}}'
        inputs:
          certSecureFile: $(apple_DevelopmentCertificateSecureFileName)
          certPwd: $(apple_DevelopmentCertificatePassword)
      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate for ${{buildVariant.name}}'
        inputs:
          certSecureFile: $(apple_DistributionCertificateSecureFileName)
          certPwd: $(apple_DistributionCertificatePassword)
      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile for ${{buildVariant.name}}'
        inputs:
          provProfileSecureFile: $(${{buildVariant.name}}_AppleDevelopmentProvisioningProfileSecureFileName)
      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile for ${{buildVariant.name}}'
        inputs:
          provProfileSecureFile: $(${{buildVariant.name}}_AppleDistributionProvisioningProfileSecureFileName)
    - task: CmdLine@2
      displayName: 'Use Xcode 12.5.1'
      inputs:
        script: 'xcode-select --switch /Applications/Xcode_12.5.1.app'
    - task: NodeTool@0
      displayName: 'Use Node 16.12.0'
      inputs:
        versionSpec: '16.12.0'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: ci
        workingDir: '$(appDir)'
        verbose: false
    - task: CmdLine@2
      displayName: 'bundle install'
      inputs:
        script: 'bundle install'
        workingDirectory: '$(appDir)'
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: DownloadSecureFile@1
        displayName: 'Download GoogleServices-Info.plist file for ${{buildVariant.name}}'
        inputs:
          secureFile: $(${{buildVariant.name}}_GoogleServicesInfoPlistSecureFileName)
      - task: CopyFiles@2
        displayName: 'Copy GoogleServices-Info.plist file to: $(appDir)/ios/SantokuApp/Supporting'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: $(${{buildVariant.name}}_GoogleServicesInfoPlistSecureFileName)
          TargetFolder: '$(appDir)/ios/SantokuApp/Supporting'
      - task: CmdLine@2
        displayName: 'Build iOS app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane ios ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
      - task: CmdLine@2
        displayName: 'Upload app to DeployGate'
        inputs:
          script: |
            curl -X POST -H "Authorization: token $(deployGate_OrganizationApiKey)" "https://deploygate.com/api/users/$(deployGate_OrganizationName)/apps" -F "file=@${{buildVariant.iOSAppPath}}" -F "distribution_name=$(branchName)" -F "message=Build $(branchName) with Azure Pipeline"
          workingDirectory: '$(appDir)'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(appDir)/ios/build'
        artifactType: 'pipeline'
        artifactName: 'ipa'
        parallel: true
      condition: succeeded()
