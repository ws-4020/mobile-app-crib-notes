trigger: none

name: $(date:yyyyMMdd)$(rev:.rr)

parameters:
- name: buildVariants
  type: object
  default:
    - name: 'devSantokuAppDebugAdvanced'
      laneName: 'dev_debug_advanced'
      androidAppPath: 'android/app/build/bundle/devSantokuAppDebugAdvanced/app-devSantokuApp-debugAdvanced.aab'
      iOSAppPath: 'ios/build/DevSantokuAppDebugAdvanced.ipa'
      certificates:
        - secureFileUUIDVariableName: '$(AppleDevelopmentCertificateSecureFileUUID)'
          certPasswordVariableName: '$(AppleDevelopmentCertificatePassword)'
        - secureFileUUIDVariableName: '$(AppleDistributionCertificateSecureFileUUID)'
          certPasswordVariableName: '$(AppleDistributionCertificatePassword)'
      provisioningProfiles:
        - secureFileUUIDVariableName: '$(AppleDevelopmentProvisioningProfileSecureFileUUID)'
        - secureFileUUIDVariableName: '$(AppleDistributionProvisioningProfileSecureFileUUID)'

variables:
- name: appDir
  value: '$(System.DefaultWorkingDirectory)/example-app/SantokuApp'

stages:
- stage: Android
  displayName: Build Android Applications
  jobs:
  - job: build_android_app
    displayName: 'Build Android Apps'
    pool:
      vmImage: macOS-10.15
    steps:
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: '16.x'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: 'ci'
        workingDir: '$(appDir)'
        verbose: false
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: CmdLine@2
        displayName: 'Build Android app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane android ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
    - task: CopyFiles@2
      displayName: 'Copy aab files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(appDir)/android/app/build/outputs'
        Contents: '**/*.aab'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: CopyFiles@2
      displayName: 'Copy apk files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(appDir)/android/app/build/outputs'
        Contents: '**/*.apk'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()

- stage: iOS
  displayName: Build iOS Applications
  jobs:
  - job: build_ios_app
    displayName: 'Build iOS Apps'
    pool:
      vmImage: macOS-10.15
    steps:
    - ${{ each buildVariant in parameters.buildVariants }}:
      - ${{ each certificate in buildVariant.certificates }}:
        - task: InstallAppleCertificate@2
          displayName: 'Install an Apple certificate for ${{buildVariant.name}}'
          inputs:
            certSecureFile: ${{certificate.secureFileUUIDVariableName}}
            certPwd: ${{certificate.certPasswordVariableName}}
      - ${{ each profile in buildVariant.provisioningProfiles }}:
        - task: InstallAppleProvisioningProfile@1
          displayName: 'Install an Apple provisioning profile for ${{buildVariant.name}}'
          inputs:
            provProfileSecureFile: ${{profile.secureFileUUIDVariableName}}
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: '16.x'
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: ci
        workingDir: '$(appDir)'
        verbose: false
    - task: CmdLine@2
      displayName: 'bundle install'
      inputs:
        script: 'bundle install'
        workingDirectory: '$(appDir)'
    - ${{ each buildVariant in parameters.buildVariants }}:
      - task: CmdLine@2
        displayName: 'Build iOS app for ${{buildVariant.name}}'
        inputs:
          script: 'fastlane ios ${{buildVariant.laneName}}'
          workingDirectory: '$(appDir)'
    - task: CopyFiles@2
      displayName: 'Copy artifacts to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(appDir)/ios'
        Contents: '**/*.ipa'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
